import SwiftUI

struct ContentView: View {
    
    @State var volume = 0.0
    let heightBox: CGFloat = 200
    @State var stretchValue = 0.0
    @State var endAnimation = false

    func calculateStretch(value: DragGesture.Value) {
        let value = (heightBox - value.location.y) / heightBox
        if value < 0.0 {
            stretchValue = sqrt(-value)
            endAnimation = true
        } else if value > 1.0 {
            stretchValue = sqrt(value - 1.0)
            endAnimation = false
        } else {
            stretchValue = 0.0
            endAnimation = false
        }
        self.volume = min(1, max(0, value))
    }

    var body: some View {
        
        ZStack(alignment: .center)  {
            Image("back")
            
            ZStack(alignment: .bottom) {
                Rectangle()
                    .background(.ultraThinMaterial)
                   
                Color.white
                    .frame(height: (heightBox + stretchValue * 20.0) * volume)
            }
            .gesture(
                DragGesture()
                    .onChanged({ value in
                        calculateStretch(value: value)
                    })
                    .onEnded({ value in
                        withAnimation {
                            stretchValue = 0.0
                        }
                    })
            )
            .frame(width: 80 - stretchValue * 5.0, height: heightBox + stretchValue * 20.0)
            .mask(RoundedRectangle(cornerRadius: 20))
            .offset(x: 0.0, y: endAnimation ? stretchValue * 20.0 : -stretchValue * 20.0)
        }
    }




}
